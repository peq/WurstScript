package DamageDetection

import OnUnitEnterLeave
import LinkedList
import HashMap

/**
 * For auto registration (this package will not auto-register units by default)
 * use the following line on a init code:
 *
 * onEnter(() -> OnDamageTriggerPool.getOnDamageTrigger().addUnit(getEnterLeaveUnit()))
 */

/**
 * How many unit can a trigger (events) hold?
 * @default 75
 */
constant int BUCKET_SIZE = 75

/**
 * Time in seconds to clear the leaks
 * @default 300
 */
constant real CLEAR_TIMEOUT = 300

/**
 * Is the package (on-damage triggers) enabled?
 */
bool IS_ENABLED = true

/**
 * All onDamage registered code to run
 */
boolexpr functions = null

/**
 * Global filter
 */
function canDetectDamage(unit whichUnit) returns bool
	return true

/**
 * Safetly damage a unit inside of an a "onDamage" code
 */
public function unit.damageTargetInsideOnDamageCode(unit target, real amount)
	bool wasEnabled = IS_ENABLED

	disableDamageDetection()
	this.damageTarget(target, amount)
	
	// Avoid enabling package if it was previously disabled
	if (wasEnabled)
		enableDamageDetection()

/**
 * Register a function to run when a damage occurs
 */
public function addOnDamageFunc(boolexpr func)
	functions = Or(functions, func)
	OnDamageTriggerPool.notifyAddedFunction()

/**
 * Register a function to run when a damage occurs
 */
public function addOnDamageFunc(code func)
	boolexpr b = Condition(func)
	addOnDamageFunc(b)

/**
 *
 */
public function enableDamageDetection()
	if (IS_ENABLED == false)
		IS_ENABLED = true
		OnDamageTriggerPool.notifyEnabledDisabledTrigger()

/**
 *
 */	
public function disableDamageDetection()
	if (IS_ENABLED)
		IS_ENABLED = false
		OnDamageTriggerPool.notifyEnabledDisabledTrigger()

class OnDamageTrigger
	/**
	 * Used to check if a unit is already registered or not
	 */
	private static HashMap<unit, int> hashMap = new HashMap<unit, int>()
	
	/**
	 * 
	 */
	private trigger _trigger
	
	/**
	 * Registered units in the trigger
	 */
	private LinkedList<unit> units
	
	/**
	 * Amount of event-leaks of the trigger
	 */
	private int leaks
	
	/**
	 * Return the instance in which the unit is registered (if any)
	 */
	static function getOnDamageTriggerFromUnit(unit whichUnit) returns OnDamageTrigger
		return hashMap.get(whichUnit) castTo OnDamageTrigger
	
	/**
	 * Assign instance (where is registered) to unit
	 * 
	 * @param unit whichUnit
	 * @param OnDamageTrigger _trigger Pass null to delete from registry
	 */
	private static function setDamageTriggerToUnit(unit whichUnit, OnDamageTrigger _trigger)
		if (_trigger != null)
			hashMap.put(whichUnit, _trigger castTo int)
		else
			hashMap.remove(whichUnit)
	
	/**
	 * Check if trigger has event-leaks (units added and then removed)
	 */	
	function hasLeaks() returns bool
		return this.leaks > 0
	
	/**
	 * 
	 */
	function notifyEnabledDisabledTrigger()
		if (IS_ENABLED)
			this._trigger.enable()
		else
			this._trigger.disable()
	
	/**
	 * 
	 */
	function notifyAddedFunction()
		this._trigger.clearConditions()
		this._trigger.addCondition(functions)
	
	/**
	 * Re-register all on-damage-unit event to the trigger (used when rebuilding the trigger)
	 */
	private function reRegisterAllUnits()
		LLIterator<unit> allUnits = this.units.iterator()
		
		while (allUnits.hasNext())
			this._trigger.registerUnitEvent(allUnits.next(), EVENT_UNIT_DAMAGED)
			
		allUnits.close()
	
	/**
	 * Rebuild the trigger to clear leaks
	 */
	function rebuild()		
		this._trigger.destr()
		this._trigger = CreateTrigger()
		
		this.leaks = 0
		
		this.reRegisterAllUnits()
		this.notifyEnabledDisabledTrigger()
		this.notifyAddedFunction()
	
	/**
	 * Check if this instance can still register units or if it is full
	 */
	function canRegisterUnits() returns bool
		return this.units.getSize() < BUCKET_SIZE
	
	/**
	 * @param unit whichUnit
	 * @return bool True if registered, false otherwise
	 */
	function addUnit(unit whichUnit) returns bool		
		if (whichUnit == null)
			return false
		
		if (this.canRegisterUnits() == false)
			return false
		
		if (canDetectDamage(whichUnit) == false)
			return false
		
		// Check if already registered
		if (OnDamageTrigger.getOnDamageTriggerFromUnit(whichUnit) != null)
			return false
		
		this._trigger.registerUnitEvent(whichUnit, EVENT_UNIT_DAMAGED)
		this.units.add(whichUnit)
		
		OnDamageTrigger.setDamageTriggerToUnit(whichUnit, this)
		
		return true
	
	/**
	 *
	 */
	function removeUnit(unit whichUnit)
		// Avoid units who are not registered in this instance
		if (OnDamageTrigger.getOnDamageTriggerFromUnit(whichUnit) == this)
			this.leaks++
			this.units.remove(whichUnit)
			
			OnDamageTrigger.setDamageTriggerToUnit(whichUnit, null)
	
	/**
	 *
	 */	
	construct()
		this.units = new LinkedList<unit>()
		this.rebuild()

class OnDamageTriggerPool
	/**
	 * All OnDamageTrigger instances created
	 */
	private static LinkedList<OnDamageTrigger> triggers = new LinkedList<OnDamageTrigger>()
	
	/**
	 * Non-instanciable class
	 */
	private construct()
	
	/**
	 * Notify to all OnDamageTrigger instances that a "onDamage" function has been added
	 */
	static function notifyAddedFunction()
		LLIterator<OnDamageTrigger> allTriggers = triggers.iterator()
		
		while (allTriggers.hasNext())
			allTriggers.next().notifyAddedFunction()
			
		allTriggers.close()
	
	/**
	 * Notify to all OnDamageTrigger isntances that the package has been enabled/disabled
	 */
	static function notifyEnabledDisabledTrigger()
		LLIterator<OnDamageTrigger> allTriggers = triggers.iterator()
		
		while (allTriggers.hasNext())
			allTriggers.next().notifyEnabledDisabledTrigger()
			
		allTriggers.close()
	
	/**
	 * Clear leaks (if any) of all OnDamageTrigger instances
	 */
	static function clearLeaks()
		LLIterator<OnDamageTrigger> allTriggers = triggers.iterator()
		OnDamageTrigger _trigger = null
		
		while (allTriggers.hasNext())
			_trigger = allTriggers.next()
			
			if (_trigger.hasLeaks())
				_trigger.rebuild()
			
		allTriggers.close()
	
	/**
	 * Get a usable OnDamageTrigger instance
	 */
	static function getOnDamageTrigger() returns OnDamageTrigger
		LLIterator<OnDamageTrigger> allTriggers = triggers.iterator()
		OnDamageTrigger _trigger = null
	
		while (allTriggers.hasNext())
			_trigger = allTriggers.next()
			
			if (_trigger.canRegisterUnits())
				break
			else
				_trigger = null

		allTriggers.close()

		// If all instances are full or there is none, then create one
		if (_trigger == null)
			_trigger = new OnDamageTrigger()
			triggers.addtoStart(_trigger)

		return _trigger
			
init
	// Auto clear all leaks
	CreateTimer().startPeriodic(CLEAR_TIMEOUT, () -> OnDamageTriggerPool.clearLeaks())
	
	// Auto register entering units
	//onEnter(() -> OnDamageTriggerPool.getOnDamageTrigger().addUnit(getEnterLeaveUnit()))
	
	// Auto unregister leaver units to avoid event leaks
	onLeave(() -> begin
		unit leaver = getEnterLeaveUnit()
		OnDamageTrigger.getOnDamageTriggerFromUnit(leaver).removeUnit(leaver)
		leaver = null
	end)