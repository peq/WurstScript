buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'de.undercouch:gradle-download-task:3.2.0'
        classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:1.0.2'
    }
}

plugins {
    id "jacoco"
    id 'com.github.kt3k.coveralls' version '2.8.2'
    id 'java'
    id 'antlr'
    id 'eclipse'
    id 'idea'
    id 'application'
}

import de.undercouch.gradle.tasks.download.Download

import java.util.regex.Matcher
import java.util.regex.Pattern


mainClassName = "de.peeeq.wurstio.Main"
version = "1.8.0.0"

jacocoTestReport {
    reports {
        xml.enabled true
    }

    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it,
                    exclude: ['**/ast/**', '**/jassAst/**', '**/jassIm/**', '**/luaAst/**', '**/antlr/**'])
        })
    }
}

String genDir = "$projectDir/src-gen"

sourceSets {
    main {
        java {
            srcDir 'src/main/java'
            srcDir genDir
        }
        resources {
            srcDir 'src/main/resources'
        }
    }
}

repositories {
    mavenLocal()
    mavenCentral()
    maven { url 'https://jitpack.io' }
    jcenter()
}

dependencies {

    // Antlr parsing library
    antlr "org.antlr:antlr4:4.7"

    // tool for generating AST-classes
    compileOnly 'com.github.peterzeller:abstractsyntaxgen:0.3.0'

    // JUnit for testing
    testCompile group: 'org.testng', name: 'testng', version: '6.13.1'
    testCompile group: 'org.hamcrest', name: 'hamcrest-all', version: '1.3'

    // Google guava
    compile 'com.google.guava:guava:21.0'

    // Functional data structures:
    compile group: 'org.functionaljava', name: 'functionaljava', version: '4.7'

    // Support for the vscode language server protocol
    compile group: 'org.eclipse.lsp4j', name: 'org.eclipse.lsp4j', version: '0.4.0'

    // @Nullable annotations
    compile group: 'org.eclipse.jdt', name: 'org.eclipse.jdt.annotation', version: '2.1.0'

    // Gson for json parsing
    compile group: 'com.google.code.gson', name: 'gson', version: '2.8.2'

    // Velocity template engine for generating Html documents from Hotdoc documentation
    compile group: 'org.apache.velocity', name: 'velocity', version: '1.7'

    // Chardet for guessing the file-encoding of a source-file
    compile group: 'net.sourceforge.jchardet', name: 'jchardet', version: '1.0'

    // Water's wc3 libs including Crigges' jmpq
    compile 'com.github.inwc3:wc3libs:ccf44373c7'

    // The setup tool for wurst.build handling
    compile 'com.github.wurstscript:wurstsetup:cc208dcc86'

    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.25'
    compile group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3'
}

configurations.all {
    exclude group: "org.slf4j", module: "slf4j-log4j12"
    exclude group: "log4j", module: "log4j"
}

task genAst {
    description = 'Compile ast specifications'
    fileTree(dir: 'parserspec', include: '**/*.parseq').each { file ->

        Pattern PACKAGE_PATTERN = Pattern.compile("package\\s+(\\S+)\\s*;");
        String fileContents = file.text

        Matcher matcher = PACKAGE_PATTERN.matcher(fileContents);
        String packageName = "";
        if (matcher.find()) {
            packageName = matcher.group(1);
        }

        String targetDir = "$genDir/" + packageName.replace(".", "/")

        inputs.file(file)
        outputs.dir(targetDir)

        doLast {
            javaexec {
                classpath configurations.compileOnly
                main = "asg.Main"
                args = [file, targetDir]
            }
        }
    }
}


task versionInfoFile {
    description "Generates a file CompileTimeInfo.java with version number etc."

    doLast {
        def dir = new File('./src-gen/de/peeeq/wurstscript/')
        dir.mkdirs()
        def f = new File(dir, 'CompileTimeInfo.java')

        String gitRevision = "unknown-version"
        String gitRevisionlong = "unknown-version"

        new ByteArrayOutputStream().withStream { os ->
            def result = exec {
                executable = 'git'
                args = ['describe', '--tags', '--always']
                standardOutput = os
            }
            gitRevision = os.toString().trim()
        }

        new ByteArrayOutputStream().withStream { os ->
            def result = exec {
                executable = 'git'
                args = ['describe', '--tags', '--always', '--abbrev=0']
                standardOutput = os
            }
            gitRevisionlong = os.toString().trim()
        }

        String wurstVersion = "${version}-${gitRevision}"


        String currentTime = new Date().format("yyyy/MM/dd KK:mm:ss")

        f.text = """
        package de.peeeq.wurstscript;

        public class CompileTimeInfo {
            public static final String time="${currentTime}";
            public static final String revision="${gitRevision}";
            public static final String revisionLong="${gitRevisionlong}";
            public static final String version="${wurstVersion}";
        }
        """

    }
}


task gen {
    description "Generates code from various input files"
}
gen.dependsOn genAst
gen.dependsOn versionInfoFile
gen.dependsOn generateGrammarSource

compileJava.dependsOn gen


test {
    // set minimal heap size required to run tests:
    jvmArgs = ['-Xms256m']

    useTestNG() {
        suites 'src/test/resources/AllTestsSuite.xml'
    }
}

// delete the generated sources on clean
clean.doFirst {
    delete genDir
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.12'
}



apply plugin: 'de.undercouch.download'

task downloadZipFile(type: Download) {
    src 'https://github.com/wurstscript/wurstStdlib2/archive/master.zip'
    dest new File(buildDir, 'stdlib2.zip')
}

task downloadAndUnzipFile(dependsOn: downloadZipFile, type: Copy) {
    from zipTree(downloadZipFile.dest)
    into new File(buildDir, '/deps/')
}

apply from: 'deploy.gradle'



